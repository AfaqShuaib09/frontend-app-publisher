// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ImageUpload shows an image upload and an error 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ImageUpload
    className=""
    disabled={false}
    id="image-with-error"
    input={
      Object {
        "name": "imageSrc",
        "onChange": [Function],
        "value": null,
      }
    }
    label="Image Error Test"
    maxImageSize={1000000}
    meta={
      Object {
        "error": "Required",
        "pristine": false,
        "submitFailed": true,
      }
    }
    requiredHeight={675}
    requiredWidth={1134}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        name="imageSrc"
        tabIndex={-1}
      >
        <label
          className="w-100 p-0"
          htmlFor="image-with-error"
        >
          Image Error Test
        </label>
          
        
        <StatusAlert
          alertType="danger"
          className=""
          dismissible={false}
          iconClassNames={Array []}
          message="Required"
          onClose={[Function]}
          title={null}
        />
        <img
          alt=""
          className="uploaded-image"
          onLoad={[Function]}
          src={null}
        />
        <input
          accept="image/jpeg, image/png"
          disabled={false}
          id="image-with-error"
          onChange={[Function]}
          type="file"
        />
      </div>,
      "className": "form-group",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            className="w-100 p-0"
            htmlFor="image-with-error"
          >
            Image Error Test
          </label>,
          "  ",
          "",
          <StatusAlert
            alertType="danger"
            className=""
            dismissible={false}
            iconClassNames={Array []}
            message="Required"
            onClose={[Function]}
            title={null}
          />,
          <img
            alt=""
            className="uploaded-image"
            onLoad={[Function]}
            src={null}
          />,
          <input
            accept="image/jpeg, image/png"
            disabled={false}
            id="image-with-error"
            onChange={[Function]}
            type="file"
          />,
        ],
        "name": "imageSrc",
        "tabIndex": -1,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Image Error Test",
            "className": "w-100 p-0",
            "htmlFor": "image-with-error",
          },
          "ref": null,
          "rendered": "Image Error Test",
          "type": "label",
        },
        "  ",
        "",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "alertType": "danger",
            "className": "",
            "dismissible": false,
            "iconClassNames": Array [],
            "message": "Required",
            "onClose": [Function],
            "title": null,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "",
            "className": "uploaded-image",
            "onLoad": [Function],
            "src": null,
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "accept": "image/jpeg, image/png",
            "disabled": false,
            "id": "image-with-error",
            "onChange": [Function],
            "type": "file",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          name="imageSrc"
          tabIndex={-1}
        >
          <label
            className="w-100 p-0"
            htmlFor="image-with-error"
          >
            Image Error Test
          </label>
            
          
          <StatusAlert
            alertType="danger"
            className=""
            dismissible={false}
            iconClassNames={Array []}
            message="Required"
            onClose={[Function]}
            title={null}
          />
          <img
            alt=""
            className="uploaded-image"
            onLoad={[Function]}
            src={null}
          />
          <input
            accept="image/jpeg, image/png"
            disabled={false}
            id="image-with-error"
            onChange={[Function]}
            type="file"
          />
        </div>,
        "className": "form-group",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <label
              className="w-100 p-0"
              htmlFor="image-with-error"
            >
              Image Error Test
            </label>,
            "  ",
            "",
            <StatusAlert
              alertType="danger"
              className=""
              dismissible={false}
              iconClassNames={Array []}
              message="Required"
              onClose={[Function]}
              title={null}
            />,
            <img
              alt=""
              className="uploaded-image"
              onLoad={[Function]}
              src={null}
            />,
            <input
              accept="image/jpeg, image/png"
              disabled={false}
              id="image-with-error"
              onChange={[Function]}
              type="file"
            />,
          ],
          "name": "imageSrc",
          "tabIndex": -1,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Image Error Test",
              "className": "w-100 p-0",
              "htmlFor": "image-with-error",
            },
            "ref": null,
            "rendered": "Image Error Test",
            "type": "label",
          },
          "  ",
          "",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "alertType": "danger",
              "className": "",
              "dismissible": false,
              "iconClassNames": Array [],
              "message": "Required",
              "onClose": [Function],
              "title": null,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "",
              "className": "uploaded-image",
              "onLoad": [Function],
              "src": null,
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "accept": "image/jpeg, image/png",
              "disabled": false,
              "id": "image-with-error",
              "onChange": [Function],
              "type": "file",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`ImageUpload shows an image upload with no prior image 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ImageUpload
    className=""
    disabled={false}
    id="image-no-prior"
    input={
      Object {
        "name": "imageSrc",
        "onChange": [Function],
        "value": null,
      }
    }
    label="Course Image: *"
    maxImageSize={1000000}
    meta={
      Object {
        "error": null,
        "pristine": true,
        "submitFailed": false,
      }
    }
    requiredHeight={675}
    requiredWidth={1134}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        name="imageSrc"
        tabIndex={-1}
      >
        <label
          className="w-100 p-0"
          htmlFor="image-no-prior"
        >
          Course Image: *
        </label>
          
        
        <img
          alt=""
          className="uploaded-image"
          onLoad={[Function]}
          src={null}
        />
        <input
          accept="image/jpeg, image/png"
          disabled={false}
          id="image-no-prior"
          onChange={[Function]}
          type="file"
        />
      </div>,
      "className": "form-group",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            className="w-100 p-0"
            htmlFor="image-no-prior"
          >
            Course Image: *
          </label>,
          "  ",
          "",
          false,
          <img
            alt=""
            className="uploaded-image"
            onLoad={[Function]}
            src={null}
          />,
          <input
            accept="image/jpeg, image/png"
            disabled={false}
            id="image-no-prior"
            onChange={[Function]}
            type="file"
          />,
        ],
        "name": "imageSrc",
        "tabIndex": -1,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Course Image: *",
            "className": "w-100 p-0",
            "htmlFor": "image-no-prior",
          },
          "ref": null,
          "rendered": "Course Image: *",
          "type": "label",
        },
        "  ",
        "",
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "",
            "className": "uploaded-image",
            "onLoad": [Function],
            "src": null,
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "accept": "image/jpeg, image/png",
            "disabled": false,
            "id": "image-no-prior",
            "onChange": [Function],
            "type": "file",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          name="imageSrc"
          tabIndex={-1}
        >
          <label
            className="w-100 p-0"
            htmlFor="image-no-prior"
          >
            Course Image: *
          </label>
            
          
          <img
            alt=""
            className="uploaded-image"
            onLoad={[Function]}
            src={null}
          />
          <input
            accept="image/jpeg, image/png"
            disabled={false}
            id="image-no-prior"
            onChange={[Function]}
            type="file"
          />
        </div>,
        "className": "form-group",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <label
              className="w-100 p-0"
              htmlFor="image-no-prior"
            >
              Course Image: *
            </label>,
            "  ",
            "",
            false,
            <img
              alt=""
              className="uploaded-image"
              onLoad={[Function]}
              src={null}
            />,
            <input
              accept="image/jpeg, image/png"
              disabled={false}
              id="image-no-prior"
              onChange={[Function]}
              type="file"
            />,
          ],
          "name": "imageSrc",
          "tabIndex": -1,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Course Image: *",
              "className": "w-100 p-0",
              "htmlFor": "image-no-prior",
            },
            "ref": null,
            "rendered": "Course Image: *",
            "type": "label",
          },
          "  ",
          "",
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "",
              "className": "uploaded-image",
              "onLoad": [Function],
              "src": null,
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "accept": "image/jpeg, image/png",
              "disabled": false,
              "id": "image-no-prior",
              "onChange": [Function],
              "type": "file",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`ImageUpload shows an image upload with prior image 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ImageUpload
    className=""
    disabled={false}
    id="image-with-prior"
    input={
      Object {
        "name": "imageSrc",
        "onChange": [Function],
        "value": "http://www.image.uploaded.source/view/image",
      }
    }
    label={
      <strong>
        Course Image: *
      </strong>
    }
    maxImageSize={256000}
    meta={
      Object {
        "error": null,
        "pristine": true,
        "submitFailed": false,
      }
    }
    requiredHeight={110}
    requiredWidth={110}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        name="imageSrc"
        tabIndex={-1}
      >
        <label
          className="w-100 p-0"
          htmlFor="image-with-prior"
        >
          <strong>
            Course Image: *
          </strong>
        </label>
          
        
        <img
          alt=""
          className="uploaded-image"
          onLoad={[Function]}
          src="http://www.image.uploaded.source/view/image"
        />
        <input
          accept="image/jpeg, image/png"
          disabled={false}
          id="image-with-prior"
          onChange={[Function]}
          type="file"
        />
      </div>,
      "className": "form-group",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            className="w-100 p-0"
            htmlFor="image-with-prior"
          >
            <strong>
              Course Image: *
            </strong>
          </label>,
          "  ",
          "",
          false,
          <img
            alt=""
            className="uploaded-image"
            onLoad={[Function]}
            src="http://www.image.uploaded.source/view/image"
          />,
          <input
            accept="image/jpeg, image/png"
            disabled={false}
            id="image-with-prior"
            onChange={[Function]}
            type="file"
          />,
        ],
        "name": "imageSrc",
        "tabIndex": -1,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <strong>
              Course Image: *
            </strong>,
            "className": "w-100 p-0",
            "htmlFor": "image-with-prior",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Course Image: *",
            },
            "ref": null,
            "rendered": "Course Image: *",
            "type": "strong",
          },
          "type": "label",
        },
        "  ",
        "",
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "",
            "className": "uploaded-image",
            "onLoad": [Function],
            "src": "http://www.image.uploaded.source/view/image",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "accept": "image/jpeg, image/png",
            "disabled": false,
            "id": "image-with-prior",
            "onChange": [Function],
            "type": "file",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          name="imageSrc"
          tabIndex={-1}
        >
          <label
            className="w-100 p-0"
            htmlFor="image-with-prior"
          >
            <strong>
              Course Image: *
            </strong>
          </label>
            
          
          <img
            alt=""
            className="uploaded-image"
            onLoad={[Function]}
            src="http://www.image.uploaded.source/view/image"
          />
          <input
            accept="image/jpeg, image/png"
            disabled={false}
            id="image-with-prior"
            onChange={[Function]}
            type="file"
          />
        </div>,
        "className": "form-group",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <label
              className="w-100 p-0"
              htmlFor="image-with-prior"
            >
              <strong>
                Course Image: *
              </strong>
            </label>,
            "  ",
            "",
            false,
            <img
              alt=""
              className="uploaded-image"
              onLoad={[Function]}
              src="http://www.image.uploaded.source/view/image"
            />,
            <input
              accept="image/jpeg, image/png"
              disabled={false}
              id="image-with-prior"
              onChange={[Function]}
              type="file"
            />,
          ],
          "name": "imageSrc",
          "tabIndex": -1,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <strong>
                Course Image: *
              </strong>,
              "className": "w-100 p-0",
              "htmlFor": "image-with-prior",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Course Image: *",
              },
              "ref": null,
              "rendered": "Course Image: *",
              "type": "strong",
            },
            "type": "label",
          },
          "  ",
          "",
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "",
              "className": "uploaded-image",
              "onLoad": [Function],
              "src": "http://www.image.uploaded.source/view/image",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "accept": "image/jpeg, image/png",
              "disabled": false,
              "id": "image-with-prior",
              "onChange": [Function],
              "type": "file",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
